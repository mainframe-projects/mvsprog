//ALGOL EXEC PGM=ALGOL,REGION=48K                                       00020000
//SYSPRINT DD SYSOUT=A                                                  00040000
//SYSPUNCH DD SYSOUT=B                                                  00060000
//SYSLIN DD DSN=&LOADSET,UNIT=SYSSQ,SEP=SYSPUNCH,SPACE=(3600,(10,4)),  *00080000
//          DISP=(MOD,PASS)                                             00100000
//SYSUT1 DD DSN=&SYSUT1,UNIT=SYSSQ,SEP=SYSPRINT,SPACE=(1024,(50,10))    00120000
//SYSUT2 DD DSN=&SYSUT2,UNIT=SYSSQ,SEP=SYSUT1,SPACE=(1024,(50,10))      00140000
//SYSUT3 DD DSN=&SYSUT3,UNIT=SYSDA,SPACE=(1024,(40,10))                 00160000
//LKED EXEC PGM=IEWL,PARM='XREF,LIST,LET',COND=(5,LT,ALGOL),REGION=96K  00180000
//SYSPRINT DD SYSOUT=A                                                  00200000
//SYSLIN DD DSN=&LOADSET,DISP=(OLD,DELETE)                              00220000
//       DD DDNAME=SYSIN                                                00240000
//SYSLIB DD DSN=SYS1.ALGLIB,DISP=SHR                                    00260000
//SYSLMOD DD DSN=&GOSET(GO),UNIT=SYSDA,DISP=(MOD,PASS),                *00280000
//           SPACE=(1024,(50,20,1))                                     00300000
//SYSUT1 DD DSN=&SYSUT1,UNIT=SYSDA,SEP=(SYSLIB,SYSLMOD),               *00320000
//          SPACE=(1024,(50,20))                                        00340000
//GO EXEC PGM=*.LKED.SYSLMOD,COND=((5,LT,ALGOL),(5,LT,LKED))            00360000
//ALGLDD01 DD SYSOUT=A                                                  00380000
//SYSPRINT DD SYSOUT=A                                                  00400000
//SYSUT1 DD DSN=&SYSUT1,UNIT=SYSSQ,SPACE=(1024,(20,10))                 00420000
        # NON-RECURSIVE KNIGHT'S TOUR WITH WARNSDORFF'S ALGORITHM                #
        # IF THERE ARE MULTIPLE CHOICES, BACKTRACK IF THE FIRST CHOICE DOESN'T   #
        # FIND A SOLUTION                                                        #
         
        # THE SIZE OF THE BOARD                                                  #
        INT BOARD SIZE = 8;
         
         
        # DIRECTIONS FOR MOVES #
        INT NNE = 1, NEE = 2, SEE = 3, SSE = 4, SSW = 5, SWW = 6, NWW = 7, NNW = 8;
         
        INT LOWEST MOVE  = NNE;
        INT HIGHEST MOVE = NNW;
         
        # THE VERTICAL POSITION CHANGES OF THE MOVES                             #
        #                  NNE, NEE, SEE, SSE, SSW, SWW, NWW, NNW                #
        []INT OFFSET V = (  -2,  -1,   1,   2,   2,   1,  -1,  -2 );
        # THE HORIZONTAL POSITION CHANGES OF THE MOVES                           #
        #                  NNE, NEE, SEE, SSE, SSW, SWW, NWW, NNW                #
        []INT OFFSET H = (   1,   2,   2,   1,  -1,  -2,  -2,  -1 );
         
         
        MODE SQUARE = STRUCT( INT MOVE      # THE NUMBER OF THE MOVE THAT CAUSED #
                                            # THE KNIGHT TO REACH THIS SQUARE    #
                            , INT DIRECTION # THE DIRECTION OF THE MOVE THAT     #
                                            # BROUGHT THE KNIGHT HERE - ONE OF   #
                                            # NNE, NEE, SEE, SSE, SSW, SWW, NWW  #
                                            # OR NNW - USED FOR BACKTRACKING     #
                                            # ZERO FOR THE FIRST MOVE            #
                            );
         
        # THE BOARD #
        [ BOARD SIZE, BOARD SIZE ]SQUARE BOARD;
         
        # INITIALISES THE BOARD SO THERE ARE NO USED SQUARES #
        PROC INITIALISE BOARD = VOID:
            FOR ROW FROM 1 LWB BOARD TO 1 UPB BOARD
            DO
                FOR COL FROM 2 LWB BOARD TO 2 UPB BOARD
                DO
                    BOARD[ ROW, COL ] := ( 0, 0 )
                OD
            OD; # INITIALISE BOARD #
         
         
        INT ITERATIONS := 0;
        INT BACKTRACKS := 0;
         
        # PRINTS THE BOARD #
        PROC PRINT TOUR = VOID:
        BEGIN
         
            PRINT( ( "       A   B   C   D   E   F   G   H", NEWLINE ) );
            PRINT( ( "   +--------------------------------", NEWLINE ) );
         
            FOR ROW FROM 1 UPB BOARD BY -1 TO 1 LWB BOARD
            DO
                PRINT( ( WHOLE( ROW, -3 ) ) );
                PRINT( ( "|" ) );
         
                FOR COL FROM 2 LWB BOARD TO 2 UPB BOARD
                DO
                    PRINT( ( " " ) );
                    PRINT( ( WHOLE( MOVE OF BOARD[ ROW, COL ], -3 ) ) )
                OD;
                PRINT( ( NEWLINE ) )
            OD
         
        END; # PRINT TOUR #
         
         
        # DETERMINES WHETHER A MOVE TO THE SPECIFIED ROW AND COLUMN IS POSSIBLE #
        PROC CAN MOVE TO = ( INT ROW, INT COL )BOOL:
            IF ROW > 1 UPB BOARD
            OR ROW < 1 LWB BOARD
            OR COL > 2 UPB BOARD
            OR COL < 2 LWB BOARD
            THEN
                # THE POSITION IS NOT ON THE BOARD                              #
                FALSE
            ELSE
                # THE MOVE IS LEGAL, CHECK THE SQUARE IS UNOCCUPIED             #
                MOVE OF BOARD[ ROW, COL ] = 0
            FI;
         
         
        # USED TO HOLD COUNTS OF THE NUMBER OF MOVES THAT COULD BE MADE IN EACH #
        # DIRECTION FROM THE CURRENT SQUARE                                     #
        [ LOWEST MOVE : HIGHEST MOVE ]INT POSSIBLE MOVE COUNT;
         
         
        # SETS THE ELEMENTS OF POSSIBLE MOVE COUNT TO THE NUMBER OF MOVES THAT  #
        # COULD BE MADE IN EACH DIRECTION FROM THE SPECIFIED ROW AND COL        #
        PROC COUNT MOVES IN EACH DIRECTION FROM = ( INT ROW, INT COL )VOID:
            FOR MOVE DIRECTION FROM LOWEST MOVE TO HIGHEST MOVE
            DO
         
                INT NEW ROW = ROW + OFFSET V[ MOVE DIRECTION ];
                INT NEW COL = COL + OFFSET H[ MOVE DIRECTION ];
         
                IF NOT CAN MOVE TO( NEW ROW, NEW COL )
                THEN
                    # CAN'T MOVE TO THIS SQUARE #
                    POSSIBLE MOVE COUNT[ MOVE DIRECTION ] := -1
                ELSE
                    # A MOVE IN THIS DIRECTION IS POSSIBLE #
                    # - COUNT THE NUMBER OF MOVES THAT COULD BE MADE FROM IT #
         
                    POSSIBLE MOVE COUNT[ MOVE DIRECTION ] := 0;
         
                    FOR SUBSEQUENT MOVE FROM LOWEST MOVE TO HIGHEST MOVE
                    DO
                        IF CAN MOVE TO( NEW ROW + OFFSET V[ SUBSEQUENT MOVE ]
                                      , NEW COL + OFFSET H[ SUBSEQUENT MOVE ]
                                      )
                        THEN
                            # HAVE A POSSIBLE SUBSEQUENT MOVE #
                            POSSIBLE MOVE COUNT[ MOVE DIRECTION ] +:= 1
                        FI
                    OD
                FI
         
            OD;
         
         
         
        # UPDATE THE BOARD TO THE FIRST KNIGHT'S TOUR FOUND STARTING FROM       #
        # "START ROW" AND "START COL".                                          #
        # RETURN TRUE IF ONE WAS FOUND, FALSE OTHERWISE                         #
        PROC FIND TOUR = ( INT START ROW, INT START COL )BOOL:
        BEGIN
         
            INITIALISE BOARD;
         
            BOOL RESULT := TRUE;
         
            INT  MOVE NUMBER  := 1;
            INT  ROW          := START ROW;
            INT  COL          := START COL;
         
            # THE TOUR WILL BE COMPLETE WHEN WE HAVE MADE AS MANY MOVES            #
            # AS THERE SQUARES ON THE BOARD                                        #
            INT  FINAL MOVE    = ( ( ( 1 UPB BOARD ) + 1 ) - 1 LWB BOARD )
                               * ( ( ( 2 UPB BOARD ) + 1 ) - 2 LWB BOARD )
                               ;
         
            # THE FIRST MOVE IS TO PLACE THE KNIGHT ON THE STARTING SQUARE         #
            BOARD[ ROW, COL ]  := ( MOVE NUMBER, LOWEST MOVE - 1 );
            # START OFF WITH AN UNKNOWN DIRECTION FOR THE BEST MOVE                #
            INT BEST DIRECTION := LOWEST MOVE - 1;
         
            # ATTEMPT TO FIND A SEQUENCE OF MOVES THAT WILL REACH EACH SQUARE ONCE #
            WHILE
                MOVE NUMBER < FINAL MOVE AND RESULT
            DO
         
                ITERATIONS +:= 1;
         
                # COUNT THE NUMBER OF MOVES POSSIBLE FROM EACH POSSIBLE MOVE       #
                # FROM THIS SQUARE                                                 #
                COUNT MOVES IN EACH DIRECTION FROM( ROW, COL );
         
                # FIND THE DIRECTION WITH THE LOWEST NUMBER OF SUBSEQUENT MOVES    #
         
                IF BEST DIRECTION < LOWEST MOVE
                THEN
                    # MUST FIND THE BEST DIRECTION TO MOVE IN                      #
         
                    INT LOWEST MOVE COUNT := HIGHEST MOVE + 1;
         
                    FOR MOVE DIRECTION FROM LOWEST MOVE TO HIGHEST MOVE
                    DO
                        IF  POSSIBLE MOVE COUNT[ MOVE DIRECTION ] >= 0
                        AND POSSIBLE MOVE COUNT[ MOVE DIRECTION ] <  LOWEST MOVE COUNT
                        THEN
                            # HAVE A MOVE WITH FEWER POSSIBLE SUBSEQUENT MOVES     #
                            BEST DIRECTION    := MOVE DIRECTION;
                            LOWEST MOVE COUNT := POSSIBLE MOVE COUNT[ MOVE DIRECTION ]
                        FI
                    OD
         
                ELSE
                    # FOLLOWING A BACKTRACK - FIND AN ALTERNATIVE WITH THE SAME    #
                    # LOWEST NUMBER OF POSSIBLE MOVES - IF THERE ARE ANY           #
                    # IF THERE AREN'T, WE WILL BACKTRACK AGAIN                     #
         
                    INT LOWEST MOVE COUNT := POSSIBLE MOVE COUNT[ BEST DIRECTION ];
         
                    WHILE
                        BEST DIRECTION +:= 1;
                        IF BEST DIRECTION > HIGHEST MOVE
                        THEN
                            # NO MORE POSSIBLE MOVES WITH THE LOWEST NUMBER OF     #
                            # SUBSEQUENT MOVES                                     #
                            FALSE
                        ELSE
                            # KEEP LOOKING IF THE NUMBER OF MOVES FROM THIS SQUARE #
                            # ISN'T THE LOWEST                                     #
                            POSSIBLE MOVE COUNT[ BEST DIRECTION ] /= LOWEST MOVE COUNT
                        FI
                    DO
                        SKIP
                    OD
         
                FI;
         
                IF BEST DIRECTION  <= HIGHEST MOVE
                AND BEST DIRECTION >= LOWEST MOVE
                THEN
                    # WE FOUND A BEST POSSIBLE MOVE #
         
                    INT NEW ROW = ROW + OFFSET V[ BEST DIRECTION ];
                    INT NEW COL = COL + OFFSET H[ BEST DIRECTION ];
         
                    ROW               := NEW ROW;
                    COL               := NEW COL;
                    MOVE NUMBER      +:= 1;
                    BOARD[ ROW, COL ] := ( MOVE NUMBER, BEST DIRECTION );
         
                    BEST DIRECTION    := LOWEST MOVE - 1
         
                ELSE
                    # NO MORE MOVES FROM THIS POSITION - BACKTRACK #
         
                    IF MOVE NUMBER = 1
                    THEN
                        # AT THE STARTING POSITION - NO SOLUTION #
                        RESULT := FALSE
         
                    ELSE
                        # NOT AT THE STARTING POSITION - UNDO THE LATEST MOVE #
         
                        BACKTRACKS  +:= 1;
         
                        MOVE NUMBER -:= 1;
         
                        INT CURR ROW := ROW;
                        INT CURR COL := COL;
         
                        BEST DIRECTION := DIRECTION OF BOARD[ CURR ROW, CURR COL ];
         
                        ROW -:= OFFSET V[ BEST DIRECTION ];
                        COL -:= OFFSET H[ BEST DIRECTION ];
         
                        # RESET THE SQUARE WE JUST BACKTRACKED FROM #
                        BOARD[ CURR ROW, CURR COL ] := ( 0, 0 )
         
                    FI
         
                FI
         
            OD;
         
            RESULT
        END; # FIND TOUR #
         
         
        MAIN:(
         
            # GET THE STARTING POSITION #
         
            CHAR  ROW;
            CHAR  COL;
         
            WHILE
                PRINT( ( "ENTER STARTING ROW(1-8) AND COL(A-H): " ) );
                READ ( ( ROW, COL, NEWLINE ) );
                ROW < "1" OR ROW > "8" OR COL < "A" OR COL > "H"
            DO
                SKIP
            OD;
         
            # CALCULATE THE TOUR FROM THAT POSITION, IF POSSIBLE #
         
            IF FIND TOUR( ABS ROW - ABS "0", ( ABS COL - ABS "A" ) + 1 )
            THEN
                # FOUND A SOLUTION #
                PRINT TOUR
            ELSE
                # COULDN'T FIND A SOLUTION #
                PRINT( ( "SOLUTION NOT FOUND - ITERATIONS: ", ITERATIONS
                       , ", BACKTRACKS: ", BACKTRACKS
                       , NEWLINE
                       )
                     )
            FI
         
        )
        
