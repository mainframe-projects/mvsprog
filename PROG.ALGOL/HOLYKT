//ALGOL EXEC PGM=ALGOL,REGION=48K                                       00020000
//SYSPRINT DD SYSOUT=A                                                  00040000
//SYSPUNCH DD SYSOUT=B                                                  00060000
//SYSLIN DD DSN=&LOADSET,UNIT=SYSSQ,SEP=SYSPUNCH,SPACE=(3600,(10,4)),  *00080000
//          DISP=(MOD,PASS)                                             00100000
//SYSUT1 DD DSN=&SYSUT1,UNIT=SYSSQ,SEP=SYSPRINT,SPACE=(1024,(50,10))    00120000
//SYSUT2 DD DSN=&SYSUT2,UNIT=SYSSQ,SEP=SYSUT1,SPACE=(1024,(50,10))      00140000
//SYSUT3 DD DSN=&SYSUT3,UNIT=SYSDA,SPACE=(1024,(40,10))                 00160000
//LKED EXEC PGM=IEWL,PARM='XREF,LIST,LET',COND=(5,LT,ALGOL),REGION=96K  00180000
//SYSPRINT DD SYSOUT=A                                                  00200000
//SYSLIN DD DSN=&LOADSET,DISP=(OLD,DELETE)                              00220000
//       DD DDNAME=SYSIN                                                00240000
//SYSLIB DD DSN=SYS1.ALGLIB,DISP=SHR                                    00260000
//SYSLMOD DD DSN=&GOSET(GO),UNIT=SYSDA,DISP=(MOD,PASS),                *00280000
//           SPACE=(1024,(50,20,1))                                     00300000
//SYSUT1 DD DSN=&SYSUT1,UNIT=SYSDA,SEP=(SYSLIB,SYSLMOD),               *00320000
//          SPACE=(1024,(50,20))                                        00340000
//GO EXEC PGM=*.LKED.SYSLMOD,COND=((5,LT,ALGOL),(5,LT,LKED))            00360000
//ALGLDD01 DD SYSOUT=A                                                  00380000
//SYSPRINT DD SYSOUT=A                                                  00400000
//SYSUT1 DD DSN=&SYSUT1,UNIT=SYSSQ,SPACE=(1024,(20,10))                 00420000
        # DIRECTIONS FOR MOVES #
        INT NNE = 1, NE  = 2, SE = 3, SSE = 4;
        INT SSW = 5, SW  = 6, NW = 7, NNW = 8;
         
        INT LOWEST MOVE  = NNE;
        INT HIGHEST MOVE = NNW;
         
        # THE VERTICAL POSITION CHANGES OF THE MOVES                             #
        []INT OFFSET V = ( -2, -1,  1,  2,  2,  1, -1, -2 );
        # THE HORIZONTAL POSITION CHANGES OF THE MOVES                           #
        []INT OFFSET H = (  1,  2,  2,  1, -1, -2, -2, -1 );
         
        MODE SQUARE = STRUCT( INT MOVE      # THE NUMBER OF THE MOVE THAT CAUSED #
                                            # THE KNIGHT TO REACH THIS SQUARE    #
                            , INT DIRECTION # THE DIRECTION OF THE MOVE THAT     #
                                            # BROUGHT THE KNIGHT HERE - ONE OF   #
                                            # NNE, NE, SE, SSE, SSW, SW, NW OR   #
                                            # NNW                                #
                            );
        # GET THE SIZE OF THE BOARD - MUST BE BETWEEN 4 AND 8                    #
        INT BOARD SIZE = 8;
        # THE BOARD #
        [ BOARD SIZE, BOARD SIZE ]SQUARE BOARD;
        # STARTING POSITION #
        INT START ROW := 1;
        INT START COL := 1;
        # THE TOUR WILL BE COMPLETE WHEN WE HAVE MADE AS MANY MOVES              #
        # AS THERE ARE FREE SQUARES IN THE INITIAL BOARD                         #
        INT  FINAL MOVE    := 0;
         
        # INITIALISE THE BOARD SETTING THE FREE SQUARES FROM THE SUPPLIED PTTERN #
        # THE PATTERN HAS THE ROWS IN REVERS ORDER                               #
        PROC INITIALISE BOARD = ( []STRING PATTERN )VOID:
             BEGIN
                INT PATTERN ROW := UPB BOARD;
                FOR ROW FROM 1 LWB BOARD TO 1 UPB BOARD
                DO
                    FOR COL FROM 2 LWB BOARD TO 2 UPB BOARD
                    DO
                        IF PATTERN[ PATTERN ROW ][ COL ] = "-"
                        THEN
                            # CAN'T USE THIS SQUARE                              #
                            BOARD[ ROW, COL ] := ( -1, -1 )
                        ELSE
                            # AVAILABLE SQUARE                                   #
                            BOARD[ ROW, COL ] := ( 0, 0 );
                            FINAL MOVE +:= 1;
                            IF PATTERN[ PATTERN ROW ][ COL ] = "1"
                            THEN
                                # HAVE THE START POSITION                        #
                                START ROW := ROW;
                                START COL := COL
                            FI
                        FI
                    OD;
                    PATTERN ROW -:= 1
                OD
             END; # INITIALISE BOARD #
        # STATISTICS #
        INT ITERATIONS := 0;
        INT BACKTRACKS := 0;
         
        # PRINTS THE BOARD #
        PROC PRINT TOUR = VOID:
        BEGIN
            # FORMAT "NUMBER" INTO AT LEAST TWO CHARACTERS #
            PROC N2 = ( INT NUMBER )STRING:
                IF   NUMBER < 0
                THEN
                    " -"
                ELIF NUMBER < 10 AND NUMBER >= 0
                THEN
                    " " + WHOLE( NUMBER, 0 )
                ELSE
                    WHOLE( NUMBER, 0 )
                FI; # N2 #
            PRINT( ( "     A  B  C  D  E  F  G  H", NEWLINE ) );
            PRINT( ( "   ________________________", NEWLINE ) );
            FOR ROW FROM 1 UPB BOARD BY -1 TO 1 LWB BOARD
            DO
                PRINT( ( N2( ROW ) ) );
                PRINT( ( "|" ) );
         
                FOR COL FROM 2 LWB BOARD TO 2 UPB BOARD
                DO
                    PRINT( ( " " ) );
                    PRINT( ( N2( MOVE OF BOARD[ ROW, COL ] ) ) )
                OD;
                PRINT( ( NEWLINE ) )
            OD
        END; # PRINT TOUR #
         
        # UPDAT        E THE BOARD TO THE FIRST KNIGHT'S TOUR FOUND STARTING FROM       #
        # "START ROW" AND "START COL".                                          #
        # RETURN TRUE IF ONE WAS FOUND, FALSE OTHERWISE                         #
               PROC FIND TOUR = BOOL:
        BEGIN
         
            BOOL RESULT       := TRUE;
            INT  MOVE NUMBER  := 1;
        INT  ROW          := START ROW;
        INT  COL          := START COL;
        INT  DIRECTION    := LOWEST MOVE - 1;
        # THE FIRST MOVE IS TO PLACE THE KNIGHT ON THE STARTING SQUARE #
        BOARD[ ROW, COL ] := ( MOVE NUMBER, LOWEST MOVE - 1 );
        # ATTEMPT TO FIND A SEQUENCE OF MOVES THAT WILL REACH EACH SQUARE ONCE #
        WHILE
            MOVE NUMBER < FINAL MOVE AND RESULT
        DO
            IF DIRECTION < HIGHEST MOVE
            THEN
                # TRY THE NEXT MOVE FROM THIS POSITION #
                DIRECTION +:= 1;
                INT NEW ROW = ROW + OFFSET V[ DIRECTION ];
                INT NEW COL = COL + OFFSET H[ DIRECTION ];
                IF  NEW ROW <= 1 UPB BOARD
                AND NEW ROW >= 1 LWB BOARD
                AND NEW COL <= 2 UPB BOARD
                AND NEW COL >= 2 LWB BOARD
                THEN
                    # THE MOVE IS LEGAL, CHECK THE NEW SQUARE IS UNUSED #
                    IF MOVE OF BOARD[ NEW ROW, NEW COL ] = 0
                    THEN
                        # CAN MOVE HERE #
                        ITERATIONS       +:= 1;
                        ROW               := NEW ROW;
                        COL               := NEW COL;
                        MOVE NUMBER      +:= 1;
                        BOARD[ ROW, COL ] := ( MOVE NUMBER, DIRECTION );
                        DIRECTION         := LOWEST MOVE - 1
                    FI
                FI
            ELSE
                # NO MORE MOVES FROM THIS POSITION - BACKTRACK #
                IF MOVE NUMBER = 1
                THEN
                    # AT THE STARTING POSITION - NO SOLUTION #
                    RESULT := FALSE
                ELSE
                    # NOT AT THE STARTING POSITION - UNDO THE LATEST MOVE #
                    BACKTRACKS  +:= 1;
                    MOVE NUMBER -:= 1;
                    INT CURR ROW := ROW;
                    INT CURR COL := COL;
                    ROW -:= OFFSET V[ DIRECTION OF BOARD[ CURR ROW, CURR COL ] ];
                    COL -:= OFFSET H[ DIRECTION OF BOARD[ CURR ROW, CURR COL ] ];
                    # DETERMINE WHICH DIRECTION TO TRY NEXT #
                    DIRECTION := DIRECTION OF BOARD[ CURR ROW, CURR COL ];
                    # RESET THE SQUARE WE JUST BACKTRACKED FROM #
                    BOARD[ CURR ROW, CURR COL ] := ( 0, 0 )
                FI
            FI
        OD;
        RESULT
        END; # FIND TOUR #
         
        MAIN:(
            INITIALISE BOARD( ( "-000----"
                              , "-0-00---"
                              , "-0000000"
                              , "000--0-0"
                              , "0-0--000"
                              , "1000000-"
                              , "--00-0--"
                              , "---000--"
                              )
                            );
            IF FIND TOUR
            THEN
                # FOUND A SOLUTION #
                PRINT TOUR
            ELSE
                # COULDN'T FIND A SOLUTION #
                PRINT( ( "SOLUTION NOT FOUND", NEWLINE ) )
            FI;
            PRINT( ( ITERATIONS, " ITERATIONS, ", BACKTRACKS, " BACKTRACKS", NEWLINE ) )
        )


