//ALGOL EXEC PGM=ALGOL,REGION=48K                                       00020000
//SYSPRINT DD SYSOUT=A                                                  00040000
//SYSPUNCH DD SYSOUT=B                                                  00060000
//SYSLIN DD DSN=&LOADSET,UNIT=SYSSQ,SEP=SYSPUNCH,SPACE=(3600,(10,4)),  *00080000
//          DISP=(MOD,PASS)                                             00100000
//SYSUT1 DD DSN=&SYSUT1,UNIT=SYSSQ,SEP=SYSPRINT,SPACE=(1024,(50,10))    00120000
//SYSUT2 DD DSN=&SYSUT2,UNIT=SYSSQ,SEP=SYSUT1,SPACE=(1024,(50,10))      00140000
//SYSUT3 DD DSN=&SYSUT3,UNIT=SYSDA,SPACE=(1024,(40,10))                 00160000
//LKED EXEC PGM=IEWL,PARM='XREF,LIST,LET',COND=(5,LT,ALGOL),REGION=96K  00180000
//SYSPRINT DD SYSOUT=A                                                  00200000
//SYSLIN DD DSN=&LOADSET,DISP=(OLD,DELETE)                              00220000
//       DD DDNAME=SYSIN                                                00240000
//SYSLIB DD DSN=SYS1.ALGLIB,DISP=SHR                                    00260000
//SYSLMOD DD DSN=&GOSET(GO),UNIT=SYSDA,DISP=(MOD,PASS),                *00280000
//           SPACE=(1024,(50,20,1))                                     00300000
//SYSUT1 DD DSN=&SYSUT1,UNIT=SYSDA,SEP=(SYSLIB,SYSLMOD),               *00320000
//          SPACE=(1024,(50,20))                                        00340000
//GO EXEC PGM=*.LKED.SYSLMOD,COND=((5,LT,ALGOL),(5,LT,LKED))            00360000
//ALGLDD01 DD SYSOUT=A                                                  00380000
//SYSPRINT DD SYSOUT=A                                                  00400000
//SYSUT1 DD DSN=&SYSUT1,UNIT=SYSSQ,SPACE=(1024,(20,10))                 00420000
        INT base := 10;
         
        MODE YIELDINT = PROC(INT)VOID;
        PROC gen pi digits = (INT decimal places, YIELDINT yield)VOID:
        BEGIN
          INT nine = base - 1;
          INT nines := 0, predigit := 0; # First predigit is a 0 #
          [decimal places*10 OVER 3]#LONG# INT digits; # We need 3 times the digits to calculate #
          FOR place FROM LWB digits TO UPB digits DO digits[place] := 2 OD; # Start with 2s #
          FOR place TO decimal places + 1 DO
            INT digit := 0;
            FOR i FROM UPB digits BY -1 TO LWB digits DO # Work backwards #
                INT x := #SHORTEN#(base*digits[i] + #LENG# digit*i);
                digits[i] := x MOD (2*i-1);
                digit := x OVER (2*i-1)
            OD;
            digits[LWB digits] := digit MOD base; digit OVERAB base;
            nines := 
              IF digit = nine THEN 
                nines + 1
              ELSE
                IF digit = base THEN
                  yield(predigit+1); predigit := 0 ;
                  FOR repeats TO nines DO yield(0) OD # zeros # 
                ELSE
                  IF place NE 1 THEN yield(predigit) FI; predigit := digit;
                  FOR repeats TO nines DO yield(nine) OD
                FI;
                0
              FI
          OD;
          yield(predigit)
        END;
         
        main:(
          INT feynman point = 762; # feynman point + 4 is a good test case #
# the 33rd decimal place is a shorter tricky test case #
          INT test decimal places = UPB "3.1415926.......................502"-2;
         
          INT width = ENTIER log(base*(1+small real*10)); 
         
# iterate throught the digits as they are being found #
# FOR INT digit IN # gen pi digits(test decimal places#) DO ( #,
          ## (INT digit)VOID: (
            printf(($n(width)d$,digit))
          )
# OD #);
          print(new line)
        )
