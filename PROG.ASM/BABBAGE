//ASMFCLG  PROC MAC='SYS1.MACLIB',MAC1='SYS1.MACLIB'                    00050000
//ASM      EXEC PGM=IFOX00,PARM=OBJ,REGION=128K                         00100000
//SYSLIB   DD   DSN=&MAC,DISP=SHR                                       00150000
//         DD   DSN=&MAC1,DISP=SHR                                      00200000
//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSSQ,SPACE=(1700,(600,100)),         00250000
//             SEP=(SYSLIB)                                             00300000
//SYSUT2   DD   DSN=&&SYSUT2,UNIT=SYSSQ,SPACE=(1700,(300,50)),          00350000
//             SEP=(SYSLIB,SYSUT1)                                      00400000
//SYSUT3   DD   DSN=&&SYSUT3,UNIT=SYSSQ,SPACE=(1700,(300,50))           00450000
//SYSPRINT DD   SYSOUT=A,DCB=BLKSIZE=1089                               00500000
//SYSPUNCH DD   SYSOUT=B                                                00550000
//SYSGO    DD   DSN=&&OBJSET,UNIT=SYSSQ,SPACE=(80,(200,50)),            00600000
//             DISP=(MOD,PASS)                                          00650000
//LKED     EXEC PGM=IEWL,PARM=(XREF,LET,LIST,NCAL),REGION=128K,         00700000
//             COND=(8,LT,ASM)                                          00750000
//SYSLIN   DD   DSN=&&OBJSET,DISP=(OLD,DELETE)                          00800000
//         DD   DDNAME=SYSIN                                            00850000
//SYSLMOD  DD   DSN=&&GOSET(GO),UNIT=SYSDA,SPACE=(1024,(50,20,1)),      00900000
//             DISP=(MOD,PASS)                                          00950000
//SYSUT1   DD   DSN=&&SYSUT1,UNIT=(SYSDA,SEP=(SYSLIN,SYSLMOD)),         01000000
//             SPACE=(1024,(50,20))                                     01050000
//SYSPRINT DD   SYSOUT=A                                                01100000
//GO       EXEC PGM=*.LKED.SYSLMOD,COND=((8,LT,ASM),(4,LT,LKED))        01150000
*        Find the lowest positive integer whose square ends in 269696
*        The logic of the assembler program is simple :
*        loop for i=524 step 2
*          if (i*i modulo 1000000)=269696 then leave loop
*        next i
*        output 'Solution is: i=' i '  (i*i=' i*i ')'
BABBAGE  CSECT                     beginning of the control section
         USING BABBAGE,13          define the base register
         B     72(15)              skip savearea (72=18*4)
         DC    17F'0'              savearea (18 full words (17+1))
         STM   14,12,12(13)        prolog: save the caller registers
         ST    13,4(15)            prolog: link backwards
         ST    15,8(13)            prolog: link forwards
         LR    13,15               prolog: establish addressability
         LA    6,524               let register6 be i and load 524
LOOP     LR    5,6                 load register5 with i
         MR    4,6                 multiply register5 with i
         LR    7,5                 load register7 with the result i*i
         D     4,=F'1000000'       divide register5 with 1000000
         C     4,=F'269696'        compare the reminder with 269696
         BE    ENDLOOP             if equal branch to ENDLOOP
         LA    6,2(6)              load register6 (i) with value i+2
         B     LOOP                branch to LOOP
ENDLOOP  XDECO 6,BUFFER+15         edit registrer6 (i)
         XDECO 7,BUFFER+34         edit registrer7 (i squared)
         XPRNT BUFFER,L'BUFFER     print buffer
         L     13,4(0,13)          epilog: restore the caller savearea
         LM    14,12,12(13)        epilog: restore the caller registers
         XR    15,15               epilog: set return code to 0
         BR    14                  epilog: branch to caller
BUFFER   DC    CL80'Solution is: i=............  (i*i=............)'
         END   BABBAGE             end of the control section


