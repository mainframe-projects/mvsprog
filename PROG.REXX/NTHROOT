//BRXGEN   JOB CLASS=C,REGION=0K
//IDCAMS   EXEC PGM=IDCAMS
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  *
  DEFINE ALIAS (NAME(BREXX) RELATE(SYS1.UCAT.TSO)) -
         CATALOG(SYS1.VMASTCAT/SECRET)
  SET MAXCC=0
/*
//
        /*REXX PROGRAM CALCULATES THE  NTH ROOT  OF  X,  WITH  DIGS  (DECIMAL DIGITS) ACCURACY. */
        PARSE ARG X ROOT DIGS .                          /*OBTAIN OPTIONAL ARGUMENTS FROM THE CL*/
        IF    X=='' |    X==","   THEN    X= 2           /*NOT SPECIFIED?  THEN USE THE DEFAULT.*/
        IF ROOT=='' | ROOT==","   THEN ROOT= 2           /* "       "        "   "   "      "   */
        IF DIGS=='' | DIGS==","   THEN DIGS=65           /* "       "        "   "   "      "   */
        NUMERIC DIGITS DIGS                              /*SET THE  DECIMAL DIGITS  TO   DIGS.  */
        SAY '       X = '    X                           /*ECHO THE VALUE OF   X.               */
        SAY '    ROOT = '    ROOT                        /*  "   "    "    "   ROOT.            */
        SAY '  DIGITS = '    DIGS                        /*  "   "    "    "   DIGS.            */
        SAY '  ANSWER = '    ROOT(X, ROOT)               /*SHOW THE VALUE OF   ANSWER.          */
        EXIT                                             /*STICK A FORK IN IT,  WE'RE ALL DONE. */
        /*──────────────────────────────────────────────────────────────────────────────────────*/
        ROOT: PROCEDURE;  PARSE ARG X 1 OX, R 1 OR             /*ARG1 ──► X & OX, 2ND ──► R & OR*/
              IF R==''  THEN R=2                               /*WAS ROOT SPECIFIED?  ASSUME √. */
              IF R=0    THEN RETURN '[N/A]'                    /*OOPS-AY!  CAN'T DO ZEROTH ROOT.*/
              COMPLEX= X<0 & R//2==0                           /*WILL THE RESULT BE COMPLEX?    */
              ODIGS=DIGITS()                                   /*GET THE CURRENT NUMBER OF DIGS.*/
              IF X=0 | R=1  THEN RETURN X/1                    /*HANDLE COUPLE OF SPECIAL CASES.*/
              DM=ODIGS+5                                       /*WE NEED A LITTLE GUARD ROOM.   */
              R=ABS(R);   X=ABS(X)                             /*THE ABSOLUTE VALUES OF R AND X.*/
              RM=R-1                                           /*JUST A FAST VERSION OF  ROOT -1*/
              NUMERIC FORM                                     /*TAKE A GOOD GUESS AT THE ROOT─┐*/
              PARSE VALUE FORMAT(X,2,1,,0) 'E0' WITH ? 'E' _ . /* ◄────────────────────────────┘*/
              G= (? / R'E'_ % R)  +  (X>1)                     /*KINDA USES A CRUDE "LOGARITHM".*/
              D=5                                              /*START WITH FIVE DECIMAL DIGITS.*/
                   DO UNTIL D==DM;   D=MIN(D+D,DM)             /*EACH TIME,  PRECISION DOUBLES. */
                   NUMERIC DIGITS D                            /*TELL REXX TO USE   D   DIGITS. */
                   OLD=-1                                      /*ASSUME SOME KIND OF OLD GUESS. */
                          DO UNTIL OLD=G;   OLD=G              /*WHERE DA RUBBER MEETS DA ROAD─┐*/
                          G=FORMAT((RM*G**R+X)/R/G**RM,, D-2)  /* ◄────── THE ROOT COMPUTATION─┘*/
                          END   /*UNTIL OLD=G*/                /*MAYBE UNTIL THE COWS COME HOME.*/
                   END          /*UNTIL D==DM*/                /*AND WAIT FOR MORE COWS TO COME.*/
         
              IF G=0        THEN RETURN 0                      /*IN CASE THE JILLIONTH ROOT = 0.*/
              IF OR<0       THEN G=1/G                         /*ROOT < 0 ?   RECIPROCAL IT IS! */
              IF \COMPLEX   THEN G=G*SIGN(OX)                  /*ADJUST THE SIGN  (MAYBE).      */
              NUMERIC DIGITS ODIGS                             /*REINSTATE THE ORIGINAL DIGITS. */
              RETURN (G/1)  ||  LEFT('J', COMPLEX)             /*NORMALIZE # TO DIGS, APPEND J ?*/


