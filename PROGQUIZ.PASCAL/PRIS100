//PASC   JOB '100 PRISONER PROBLEM', 
//      CLASS=A,MSGCLASS=A,MSGLEVEL=(1,1),
//      REGION=1024K,TIME=(1,0),PRTY=8
/*JOBPARM  ROOM=4242
//CLG EXEC PASCLG,GOTIME=3600,GOREG=1024K,
//      OPT='M+',
//      GOPARM='/STACK=512k'
//COMPILE.SYSIN DD *
/*
//GO.OUTPUT DD SYSOUT=*,OUTLIM=${OUTLIM:-5000}
//GO.SYSIN DD *
        PROGRAM PRISONERS100;
         
        CONST
          ROUNDS  = 100000;
         
        TYPE
          TVALUE = UINT32;
          TPRISNUM = ARRAY OF TVALUE;
        VAR
          DRAWERS,
          PRISONERSCHOICE : TPRISNUM;
         
        PROCEDURE SHUFFLE(VAR N:TPRISNUM);
        VAR
          I,J,LMT : NATIVEINT;
          TMP: TVALUE;
        BEGIN
          LMT := HIGH(N);
          FOR I := LMT DOWNTO 1 DO
          BEGIN
            //TAKE ON FROM INDEX I..LIMIT
            J := RANDOM(I+1);
            //EXCHANGE WITH I
            TMP := N[I];N[I]:= N[J];N[J]:= TMP;
          END;
        END;
         
        FUNCTION PARDONEDRANDOM(MAXTESTNUM: NATIVEINT):BOOLEAN;
        VAR
          PRISNUM,TESTNUM,LMT : NATIVEUINT;
          PARDONED : BOOLEAN;
        BEGIN
          IF MAXTESTNUM <=0 THEN
          BEGIN
            PARDONEDRANDOM := FALSE;
            EXIT;
          END;
          LMT := HIGH(DRAWERS);
          IF (MAXTESTNUM >= LMT) THEN
          BEGIN
            PARDONEDRANDOM := TRUE;
            EXIT;
          END;
         
          SHUFFLE(DRAWERS);
          PRISNUM := 0;
          REPEAT
            //EVERY PRISONER USES HIS OWN LIST OF DRAWERS
            SHUFFLE(PRISONERSCHOICE);
            TESTNUM := 0;
            REPEAT
              PARDONED := DRAWERS[PRISONERSCHOICE[TESTNUM]] = PRISNUM;
              INC(TESTNUM);
            UNTIL PARDONED OR (TESTNUM>=MAXTESTNUM);
            IF NOT(PARDONED) THEN
              BREAK;
            INC(PRISNUM);
          UNTIL PRISNUM>=LMT;
          PARDONEDRANDOM:= PARDONED;
        END;
         
        FUNCTION PARDONEDOPTIMIZED(MAXTESTNUM: NATIVEUINT):BOOLEAN;
        VAR
          PRISNUM,TESTNUM,NEXTNUM,CNT,LMT : NATIVEUINT;
          PARDONED : BOOLEAN;
        BEGIN
          IF MAXTESTNUM <=0 THEN
          BEGIN
            PARDONEDOPTIMIZED := FALSE;
            EXIT;
          END;
          LMT := HIGH(DRAWERS);
          IF (MAXTESTNUM >= LMT) THEN
          BEGIN
            PARDONEDOPTIMIZED := TRUE;
            EXIT;
          END;
         
          SHUFFLE(DRAWERS);
          LMT := HIGH(DRAWERS);
          IF MAXTESTNUM >= LMT THEN
          BEGIN
            PARDONEDOPTIMIZED := TRUE;
            EXIT;
          END;
          PRISNUM := 0;
          REPEAT
            CNT := 0;
            NEXTNUM := PRISNUM;
            REPEAT
              TESTNUM := NEXTNUM;
              NEXTNUM := DRAWERS[TESTNUM];
              INC(CNT);
              PARDONED := NEXTNUM = PRISNUM;
            UNTIL PARDONED OR (CNT >=MAXTESTNUM);
         
            IF NOT(PARDONED) THEN
              BREAK;
            INC(PRISNUM);
  UNTIL PRISNUM>LMT;
  PARDONEDOPTIMIZED := PARDONED;
END;
 
PROCEDURE CHECKRANDOM(TESTCOUNT : NATIVEUINT);
VAR
  I,CNT : NATIVEINT;
BEGIN
  CNT := 0;
  FOR I := 1 TO ROUNDS DO
    IF PARDONEDRANDOM(TESTCOUNT) THEN
      INC(CNT);
  WRITELN('RANDOMLY  ',CNT/ROUNDS*100:7:2,'% GET PARDONED OUT OF ',ROUNDS,' CHECKING MAX ',TESTCOUNT);
END;
 
PROCEDURE CHECKOPTIMIZED(TESTCOUNT : NATIVEUINT);
VAR
  I,CNT : NATIVEINT;
BEGIN
  CNT := 0;
  FOR I := 1 TO ROUNDS DO
    IF PARDONEDOPTIMIZED(TESTCOUNT) THEN
      INC(CNT);
  WRITELN('OPTIMIZED ',CNT/ROUNDS*100:7:2,'% GET PARDONED OUT OF ',ROUNDS,' CHECKING MAX ',TESTCOUNT);
END;
 
PROCEDURE ONECOMPARERUN(PRISCNT:NATIVEINT);
VAR
  I,LMT :NATIVEINT;
BEGIN
  SETLENGTH(DRAWERS,PRISCNT);
  FOR I := 0 TO PRISCNT-1 DO
    DRAWERS[I] := I;
  PRISONERSCHOICE := COPY(DRAWERS);
 
  //TEST
  WRITELN('CHECKING ',PRISCNT,' PRISONERS');
 
  LMT := PRISCNT;
  REPEAT
    CHECKOPTIMIZED(LMT);
    DEC(LMT,PRISCNT DIV 10);
  UNTIL LMT < 0;
  WRITELN;
 
  LMT := PRISCNT;
  REPEAT
    CHECKRANDOM(LMT);
    DEC(LMT,PRISCNT DIV 10);
  UNTIL LMT < 0;
  WRITELN;
  WRITELN;
END;
 
BEGIN
  //INIT
  RANDOMIZE;
  ONECOMPARERUN(20);
  ONECOMPARERUN(100);
END.


