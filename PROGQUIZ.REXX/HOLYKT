//BRXGEN   JOB CLASS=C,REGION=0K
//IDCAMS   EXEC PGM=IDCAMS
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  *
  DEFINE ALIAS (NAME(BREXX) RELATE(SYS1.UCAT.TSO)) -
         CATALOG(SYS1.VMASTCAT/SECRET)
  SET MAXCC=0
/*
//
        /*REXX PROGRAM SOLVES THE  HOLY KNIGHT'S TOUR  PROBLEM FOR A (GENERAL)  NXN  CHESSBOARD.*/
        BLANK=POS('//', SPACE(ARG(1), 0))\==0            /*SEE IF THE PENNIES ARE TO BE SHOWN.  */
        PARSE ARG  OPS   '/'   CENT                      /*OBTAIN THE OPTIONS AND THE PENNIES.  */
        PARSE VAR  OPS  N  SRANK  SFILE .                /*BOARDSIZE, STARTING POSITION, PENNYS.*/
        IF     N=='' |     N==","  THEN     N=8          /*NO BOARDSIZE SPECIFIED?  USE DEFAULT.*/
        IF SRANK=='' | SRANK==","  THEN SRANK=N          /*STARTING RANK GIVEN?      "      "   */
        IF SFILE=='' | SFILE==","  THEN SFILE=1          /*    "    FILE   "         "      "   */
        NN=N**2;  NXN='A ' N"X"N ' CHESSBOARD'           /*FILE  [↓]          [↓]   R=RANK      */
        @.=;              DO R=1  FOR N;  DO F=1  FOR N;   @.R.F=.;    END /*F*/;        END /*R*/
                                                         /*[↑]  CREATE AN EMPTY  NXN CHESSBOARD.*/
        CENT=SPACE( TRANSLATE( CENT, , ',') )            /*ALLOW USE OF COMMA (,) FOR SEPARATER.*/
        CENTS=0                                          /*NUMBER OF PENNIES ON THE CHESSBOARD. */
               DO  WHILE  CENT\=''                       /* [↓]  POSSIBLY PLACE THE PENNIES.    */
               PARSE VAR  CENT   CR  CF  X  '/'  CENT    /*EXTRACT WHERE TO PLACE THE PENNIES.  */
               IF X=''   THEN X=1                        /*IF NUMBER NOT SPECIFIED, USE 1 PENNY.*/
               IF CR=''  THEN ITERATE                    /*SUPPORT THE  "BLANKING"  OPTION.     */
                                       DO CF=CF  FOR X   /*NOW, PLACE  X  PENNIES ON CHESSBOARD.*/
                                       @.CR.CF= '¢'      /*MARK CHESSBOARD POSITION WITH A PENNY*/
                                       END   /*CF*/      /* [↑]  PLACES X PENNIES ON CHESSBOARD.*/
               END   /*WHILE*/                           /* [↑]  ALLOWS OF THE PLACING OF  X  ¢S*/
                                                         /* [↓]  TRAIPSE THROUGH THE CHESSBOARD.*/
            DO R=1  FOR N;  DO F=1  FOR N;  CENTS=CENTS + (@.R.F=='¢');   END /*F*/;     END /*R*/
                                                         /* [↑]  COUNT THE NUMBER OF PENNIES.   */
        IF CENTS\==0  THEN SAY CENTS   'PENNIES PLACED ON CHESSBOARD.'
        TARGET=NN - CENTS                                /*USE THIS AS THE NUMBER OF MOVES LEFT.*/
                           KR = '2 1 -1 -2 -2 -1  1  2'  /*THE LEGAL "RANK"  MOVES FOR A KNIGHT.*/
                           KF = '1 2  2  1 -1 -2 -2 -1'  /* "    "   "FILE"    "    "  "    "   */
        KR.M=WORDS(KR)                                   /*NUMBER OF POSSIBLE MOVES FOR A KNIGHT*/
        PARSE VAR KR  KR.1 KR.2 KR.3 KR.4 KR.5 KR.6 KR.7 KR.8   /*PARSE THE LEGAL MOVES BY HAND.*/
        PARSE VAR KF  KF.1 KF.2 KF.3 KF.4 KF.5 KF.6 KF.7 KF.8   /*  "    "    "     "    "   "  */
        BEG= '-1-'                                       /* [↑]   CREATE THE  NXN  CHESSBOARD.  */
        IF @.SRANK.SFILE ==.    THEN @.SRANK.SFILE=BEG   /*THE KNIGHT'S STARTING POSITION.      */
        IF @.SRANK.SFILE\==BEG  THEN DO    SRANK=1  FOR N   /*FIND STARTING RANK FOR THE KNIGHT.*/
                                        DO SFILE=1  FOR N   /*  "     "     FILE  "   "     "   */
                                        IF @.SRANK.SFILE\==.  THEN ITERATE
                                        @.SRANK.SFILE=BEG   /*THE KNIGHT'S STARTING POSITION.   */
                                        LEAVE SRANK         /*WE HAVE A SPOT, SO LEAVE ALL THIS.*/
                                        END   /*SFILE*/
                                     END      /*SRANK*/
        @HKT= "HOLY KNIGHT'S TOUR"                       /*A HANDY─DANDY LITERAL FOR THE  SAYS. */
        IF \MOVE(2,SRANK,SFILE)  &  \(N==1)  THEN SAY 'NO'    @HKT    "SOLUTION FOR"        NXN'.'
                                             ELSE SAY 'A SOLUTION FOR THE'   @HKT   "ON"    NXN':'
         
                                                         /*SHOW CHESSBOARD WITH MOVES AND COINS.*/
        !=LEFT('', 9 * (N<18) );           SAY           /*USED FOR INDENTATION OF CHESSBOARD.  */
        _=SUBSTR( COPIES("+───", N), 2);   SAY  ! TRANSLATE('+'_"+", '+', "+")
             DO   R=N  FOR N  BY -1;       IF R\==N      THEN SAY ! '+'_"+";     L=@.
               DO F=1  FOR N; ?=@.R.F;     IF ?==TARGET  THEN ?='END';           L=L'│'CENTER(?,3)
               END      /*F*/
             IF BLANK THEN L=TRANSLATE(L,,'¢')           /*BLANK OUT THE PENNIES ON CHESSBOARD ?*/
             SAY !  TRANSLATE(L'│', , .)                 /*DISPLAY  A  RANK OF THE  CHESSBOARD. */
             END        /*R*/                            /*19X19 CHESSBOARD CAN BE SHOWN 80 COLS*/
        SAY  !  TRANSLATE('+'_"+", '+', "+")             /*DISPLAY THE LAST RANK OF CHESSBOARD. */
        EXIT                                             /*STICK A FORK IN IT,  WE'RE ALL DONE. */
        /*──────────────────────────────────────────────────────────────────────────────────────*/
        MOVE: PROCEDURE EXPOSE @. KR. KF. TARGET; PARSE ARG #,RANK,FILE /*OBTAIN MOVE,RANK,FILE.*/
                DO T=1  FOR KR.M;   NR=RANK+KR.T;         NF=FILE+KF.T  /*POSITION OF THE KNIGHT*/
                IF @.NR.NF==.  THEN DO;                   @.NR.NF=#     /*EMPTY? KNIGHT CAN MOVE*/
                                       IF #==TARGET       THEN RETURN 1 /*IS THIS THE LAST MOVE?*/
                                       IF MOVE(#+1,NR,NF) THEN RETURN 1 /* "   "   "    "    "  */
                                       @.NR.NF=.                        /*UNDO THE ABOVE MOVE.  */
                                    END                                 /*TRY A DIFFERENT MOVE. */
                END   /*T*/                                             /* [↑]  ALL MOVES TRIED.*/
             RETURN 0                                                   /*TOUR ISN'T POSSIBLE.  */


